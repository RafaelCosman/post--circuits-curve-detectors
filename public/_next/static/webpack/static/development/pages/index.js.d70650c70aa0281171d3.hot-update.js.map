{"version":3,"file":"static/webpack/static/development/pages/index.js.d70650c70aa0281171d3.hot-update.js","sources":["webpack:///./pages/dataset/humanLabels/index.js"],"sourcesContent":["import React from 'react'\nimport dynamic from 'next/dynamic'\n\nimport Figure from 'components/figure'\nimport { Surface, Text } from 'components/ui'\nimport { includes } from 'lodash'\nimport cofab from 'pages/cofab'\nimport {\n  VictoryArea,\n  VictoryLine,\n  VictoryAxis,\n  VictoryLabel,\n  VictoryChart,\n  VictoryGroup,\n  VictoryStack,\n} from 'victory'\n\nexport const getInitialProps = () => {\n  return {}\n}\n\nexport default cofab(\n  class HumanLabels extends React.Component {\n    state = { activeGroups: [] }\n\n    componentWillMount() {\n      if (this.props.activeGroups) {\n        this.setState({ activeGroups: this.props.activeGroups })\n      }\n    }\n\n    onToggleGroup = (group) => {\n      const { activeGroups } = this.state\n\n      if (activeGroups.length > 0 && activeGroups[0] === group) {\n        this.setState({ activeGroups: [] })\n      } else {\n        this.setState({ activeGroups: [group] })\n      }\n    }\n\n    render() {\n      let {\n        bins = [],\n        heights = [],\n        interpolation = 'natural',\n        title = '',\n        stackProps = {},\n        children,\n        yAxisProps = {\n          label: '',\n        },\n        probChart = false,\n      } = this.props\n      if (typeof window === 'undefined') {\n        return null\n      }\n      const width = 1200\n      const { activeGroups } = this.state\n      const isGroupActive = (group) => includes(activeGroups, group)\n      const hasActiveGroup = activeGroups.length > 0\n\n      if (probChart) {\n        yAxisProps.tickFormat = (t) => `${t.toExponential()}`\n        yAxisProps.dy = -10\n        stackProps.domain = { y: [0, 0.0000022] }\n      }\n\n      const colors = ['#00bcd4', '#b2ebf2', '#FFF6D7', '#ff5722']\n\n      const colorSize = 20\n      const Label = ({ index, name, count }) => (\n        <Surface\n          cursor=\"pointer\"\n          onClick={() => {\n            this.onToggleGroup(index)\n          }}\n        >\n          {(hovering) => {\n            const showActive = hovering || isGroupActive(index)\n\n            return (\n              <Surface\n                flexFlow=\"row\"\n                alignItems=\"center\"\n                borderRadius={8}\n                transition=\"100ms ease-out all\"\n                background={showActive && 'rgba(0,0,0,0.02)'}\n                border={`1px solid rgba(0, 0, 0, ${showActive ? 0.2 : 0})`}\n                padding={5}\n              >\n                <Surface\n                  marginRight={12}\n                  width={colorSize}\n                  height={colorSize}\n                  borderRadius={2}\n                  background={colors[index]}\n                  opacity={\n                    hasActiveGroup ? (isGroupActive(index) ? 1 : 0.4) : 1\n                  }\n                  transition=\"300ms ease-out all\"\n                  border=\"1px solid rgba(0, 0, 0, 0.6)\"\n                />\n                <Surface>\n                  <Text fontWeight={600} lineHeight={1.2}>\n                    {name}\n                  </Text>\n                  <Text fontWeight={400} lineHeight={1.2}>\n                    {count} images\n                  </Text>\n                </Surface>\n              </Surface>\n            )\n          }}\n        </Surface>\n      )\n\n      return (\n        <Figure>\n          <React.Fragment>\n            <Surface width={width} alignSelf=\"center\">\n              <Surface\n                flexFlow=\"row\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n              >\n                <Text size={600} marginLeft={60}>\n                  {title}\n                </Text>\n                <Surface\n                  flexFlow=\"row\"\n                  marginRight={50}\n                  justifyContent=\"space-between\"\n                  width={700}\n                  alignSelf=\"flex-end\"\n                  zIndex={100}\n                >\n                  <Label index={3} name=\"Opposing Curve\" count={102} />\n                  <Label index={2} name=\"Unrelated\" count={379} />\n                  <Label index={1} name=\"Imperfect Curve\" count={170} />\n                  <Label index={0} name=\"Curve\" count={206} />\n                </Surface>\n              </Surface>\n            </Surface>\n            <Surface\n              width={width}\n              alignSelf=\"center\"\n              transform=\"translateY(-20px)\"\n            >\n              <VictoryChart width={width} height={400} {...stackProps}>\n                <VictoryStack\n                  colorScale={colors}\n                  interpolation={interpolation}\n                  animate={{\n                    duration: 800,\n                  }}\n                >\n                  {heights.map((label, index) => {\n                    const isZero = hasActiveGroup && !isGroupActive(index)\n                    const victoryData = bins\n                      .map((binValue, bin) => {\n                        let value =\n                          Math.abs(binValue) > 800\n                            ? null\n                            : {\n                                x: binValue,\n                                y: isZero ? 0 : label[bin],\n                              }\n\n                        // we multiply times a constant then divide to avoid numerical issues\n                        if (value && probChart) {\n                          value.y = value.y / 1000 / 1600\n                        }\n\n                        return value\n                      })\n                      .filter((i) => i !== null)\n\n                    const addInterpolation = interpolation\n                      ? { interpolation }\n                      : {}\n\n                    return (\n                      <VictoryGroup data={victoryData} key={index}>\n                        <VictoryArea\n                          {...addInterpolation}\n                          events={[\n                            {\n                              target: 'data',\n                              eventHandlers: {\n                                onClick: () => {\n                                  this.onToggleGroup(index)\n                                },\n                              },\n                            },\n                          ]}\n                        />\n                      </VictoryGroup>\n                    )\n                  })}\n                </VictoryStack>\n                <VictoryAxis\n                  crossAxis={false}\n                  tickCount={17}\n                  label=\"Activations\"\n                />\n\n                <VictoryAxis\n                  axisLabelComponent={<VictoryLabel dy={-13} />}\n                  tickCount={5}\n                  offsetX={50}\n                  dependentAxis\n                  {...yAxisProps}\n                />\n                <VictoryLine\n                  style={{\n                    data: { strokeWidth: 1, stroke: 'rgba(0, 0, 0, 0.6)' },\n                  }}\n                  data={[\n                    { x: 0, y: 1 },\n                    { x: 0, y: 0 },\n                  ]}\n                />\n              </VictoryChart>\n            </Surface>\n            <figcaption\n              style={{\n                width: 703,\n                marginTop: -20,\n                alignSelf: 'center',\n              }}\n            >\n              {children}\n            </figcaption>\n          </React.Fragment>\n        </Figure>\n      )\n    }\n  }\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AAAA;AACA;AAHA;AAUA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnBA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;AAoBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AADA;AARA;AAAA;AACA;AAYA,mBAEA;AACA;AAAA;AAhBA;AACA;AAieA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAxNA;AACA;AADA;AAAA;;;;A","sourceRoot":""}